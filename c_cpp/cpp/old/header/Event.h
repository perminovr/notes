#ifndef EVENT_H_
#define EVENT_H_

#include <cstdint>
#include <condition_variable>
#include <list>
#include <algorithm>


namespace perri {

/*! ----------------------------------------------------------------------------------------
 * @brief:
 * -----------------------------------------------------------------------------------------
 * */
class Event {
public:
	/*! ----------------------------------------------------------------------------------------
	 * @brief:
	 * -----------------------------------------------------------------------------------------
	 * */
	Event();
	~Event() = default;

	/*! ----------------------------------------------------------------------------------------
	 * @brief:
	 * -----------------------------------------------------------------------------------------
	 * */
	uint32_t GetID() const;

	/*! ----------------------------------------------------------------------------------------
	 * @brief:
	 * -----------------------------------------------------------------------------------------
	 * */
	bool operator==(const Event &event) const;

private:
	/*! ----------------------------------------------------------------------------------------
	 * @brief:
	 * -----------------------------------------------------------------------------------------
	 * */
	const uint32_t eventID;

	/*! ----------------------------------------------------------------------------------------
	 * @brief:
	 * -----------------------------------------------------------------------------------------
	 * */
	static uint32_t eventGUID;
};



/*! ----------------------------------------------------------------------------------------
 * @brief:
 * -----------------------------------------------------------------------------------------
 * */
class EventHandler {
public:
	/*! ----------------------------------------------------------------------------------------
	 * @brief:
	 * -----------------------------------------------------------------------------------------
	 * */
	enum class Result : uint8_t {
		Timeout,
		EventUp,
	};

	/*! ----------------------------------------------------------------------------------------
	 * @brief:
	 * -----------------------------------------------------------------------------------------
	 * */
	EventHandler() = default;
	~EventHandler() = default;

	/*! ----------------------------------------------------------------------------------------
	 * @brief:
	 * -----------------------------------------------------------------------------------------
	 * */
	int Register(Event &event);

	/*! ----------------------------------------------------------------------------------------
	 * @brief:
	 * -----------------------------------------------------------------------------------------
	 * */
	int Unregister(Event &event);

	/*! ----------------------------------------------------------------------------------------
	 * @brief:
	 * -----------------------------------------------------------------------------------------
	 * */
	int UnregisterAll();

	/*! ----------------------------------------------------------------------------------------
	 * @brief:
	 * -----------------------------------------------------------------------------------------
	 * */
	int Raise(Event &event);

	/*! ----------------------------------------------------------------------------------------
	 * @brief:
	 * -----------------------------------------------------------------------------------------
	 * */
	EventHandler::Result Wait(uint32_t timeout);

	/*! ----------------------------------------------------------------------------------------
	 * @brief:
	 * -----------------------------------------------------------------------------------------
	 * */
	int ResetEvents();

	/*! ----------------------------------------------------------------------------------------
	 * @brief:
	 * -----------------------------------------------------------------------------------------
	 * */
	bool AtLeastOne(const std::list <Event> &events) const;
	bool AtLeastOne(const std::list <Event*> &events) const;

	/*! ----------------------------------------------------------------------------------------
	 * @brief:
	 * -----------------------------------------------------------------------------------------
	 * */
	bool isRaised(const Event &event) const;

	/*! ----------------------------------------------------------------------------------------
	 * @brief:
	 * -----------------------------------------------------------------------------------------
	 * */
	const std::list <Event*>& GetOccurredEvents() const;
private:

	/*! ----------------------------------------------------------------------------------------
	 * @brief:
	 * -----------------------------------------------------------------------------------------
	 * */
	std::list <Event*> events;

	/*! ----------------------------------------------------------------------------------------
	 * @brief:
	 * -----------------------------------------------------------------------------------------
	 * */
	std::condition_variable cv;

	/*! ----------------------------------------------------------------------------------------
	 * @brief:
	 * -----------------------------------------------------------------------------------------
	 * */
	std::list <Event*> raised_events;
};

}


#endif /* EVENT_H_ */
